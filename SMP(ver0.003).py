from openpyxl import load_workbook
from docx import Document

# *****************МЕНЮ*************************************
file_name = 'sprvk.xlsx'  # EXEL Файл где хронится Форма 2
sheet = 'Unit'  # ЛИСТ где СМП
nz = [7, 18, 20, 21, 22, 23, 26, 27, 39, 42, 44]
first_year = '2010'
last_year = '2019'

district_text = 'УФО'
region_text = 'Свердловской обляасти'
# *****************СЛОВАРЬ*************************************

nz_dict = {1: 'Брюшной тиф', 2: 'Паратифы А,В,С и неуточненный', 3: 'Бактерионосители брюшного тифа, паратифов',
           4: 'Холера', 5: 'Вибриононосители холеры', 6: 'Другие сальмонеллезные инфекции',
           7: 'из них вызванные: сальмонеллами группы B', 8: 'сальмонеллами группы C', 9: 'сальмонеллами группы Д',
           10: 'Бактериальная дизентерия (шигеллез)', 11: 'из нее бактериологически подтвержденная',
           12: 'из нее вызванная: шигеллами Зонне', 13: 'шигеллами Флекснера', 14: 'Бактерионосители дизентерии',
           15: 'ОКИ установленной этиологии и ПТИ', 16: 'вызванные установленными бактериальными возбудителями',
           17: '  из них: кишечными палочками (эшерихиями)', 18: 'ОКИ, вызванные кампилобактериями',
           19: 'иерсиниями энтероколитика', 20: ' ОКИ вызванные вирусами', 21: 'Ротовирусами',
           22: 'ОКИ, вызванные вирусом Норволк', 23: 'ОКИ неустановленной этиологиии ПТИ',
           24: 'Острый паралитический полиомиелит, включая ассоциированный с вакциной', 25: 'Острые вялые параличи',
           26: ' Энторовирусные инфекции',
           27: 'Энтеровирусный менингит', 28: 'Острые гепатиты - всего', 29: 'острый гепатит А', 30: 'острый гепатит В',
           31: '  острый гепатит С', 32: 'острый гепатит Е',
           33: 'Хронические вирусные гепатиты (впервые установленные) – всего', 34: 'хронический вирусный гепатит В',
           35: 'Носительство возбудителя вирусного гепатита В', 36: 'Носительство возбудителя вирусного гепатита В',
           37: 'Дифтерия', 38: 'Бактерионосители токсигенных штаммов дифтерии',
           39: 'Коколюш', 40: 'из него коклюш, вызванный Bordetella parapertussis',
           41: 'Стрептококковая инфекция (впервые выявленная)', 42: 'Скарлатина', 43: 'стрептококковая септицемия',
           44: 'Ветрянная оспа', 45: 'Опоясывающий лишай', 46: 'Корь', 47: 'Краснуха',
           48: 'Синдром врожденной краснухи (СВК)', 49: 'Паротит эпидемический', 50: 'Менингококковая инфекция',
           51: 'из нее генерализованные формы', 52: 'Гемофильная инфекция', 53: 'Столбняк', 54: 'Туляремия',
           55: 'Сибирская язва', 56: 'Бруцеллез, впервые выявленный',
           57: 'Вирусные лихорадки, передаваемые членистоногими и вирусные геморрагические лихорадки',
           58: '  из них: лихорадка Западного Нила', 59: '  Крымская геморрагическая лихорадка',
           60: 'геморрагическая лихорадка с почечным синдромом', 61: 'Омская геморрагическая лихорадка',
           62: 'лихорадка Денге', 63: 'Клещевой вирусный энцефалит', 64: 'Клещевой боррелиоз (болезнь Лайма)',
           65: 'Псевдотуберкулез', 66: 'Лептоспироз', 67: 'Бешенство', 68: 'Укусы, ослюнения, оцарапывания животными',
           69: 'из них дикими животными', 70: 'Укусы клещами', 71: 'Орнитоз (пситтакоз)',
           72: 'Риккетсиозы', 73: 'из них: эпидемический сыпной тиф', 74: 'болезнь Брилля', 75: '  лихорадка Ку',
           76: 'сибирский клещевой тиф', 77: 'астраханская пятнистая лихорадка',
           78: 'гранулоцитарный анаплазмоз человека', 79: 'моноцитарный эрлихиоз человека', 80: 'Педикулез',
           81: 'Листериоз', 82: 'Легионеллез', 83: 'Инфекционный мононуклеоз',
           84: 'Туберулез (впервые выявленный)', 85: 'из него туберкулез органов дыхания',
           86: 'из него бациллярные формы', 87: 'Сифилис (впервые выявленный) - все формы', 88: 'Гонококковая инфекция',
           89: 'Болезнь, вызванная вирусом иммунодефицита человека (ВИЧ)',
           90: 'Острые инфекции верхних дыхательных путей множественной и неуточненной локализации',
           91: 'Грипп', 92: 'Пневмония (внебольничная)', 93: 'из нее: вирусная', 94: 'бактериальная',
           95: 'из нее: вызванная пневмококками', 96: 'Mycoplasma pneumoniae', 97: ' пневмония, вызванная хламидиями',
           98: 'Цитомегаловирусная инфекция', 99: 'Врожденная цитомегаловирусная инфекция', 100: 'Микроспория',
           101: 'Чесотка', 102: 'Трихофития', 103: 'Поствакцинальные осложнения', 104: 'Малярия, впервые выявленная'}

wb_val = load_workbook(filename=f'{file_name}', data_only=True, )  # Open file
sheet_val = wb_val[f'{sheet}']  # Open sheet
# *****************Вытаскиваем стрчку со значенимя заболевания**********************************************************

abc = ['c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l']  # Столбци таблицы

rus = 3  # Строка с РФ (в Exel)
dis = 4  # Строка с Округом (в Exel)
reg = 5  # Строка с Регионом (в Exel)

russian = []  # Список показателей заболеваемости от нозологии № 1 (С3:L3) до number_nz
district = []  # Список показателей заболеваемости от нозологии № 1 (С4:L4) до number_nz
region = []  # Список показателей заболеваемости от нозологии № 1 (С5:L5) до number_nz

line_russian = []
line_district = []
line_region = []

while rus < 548 or dis < 549 or reg < 550:
    for i in abc:
        ru = sheet_val[f'{i}{rus}'].value
        russian.append(ru)
        di = sheet_val[f'{i}{dis}'].value
        district.append(di)
        re = sheet_val[f'{i}{reg}'].value
        region.append(re)
    rus += 5
    dis += 5
    reg += 5

for number_nz in nz:
    if int(number_nz) == 1:
        c = 0
        l = 10
    else:
        c = 10 * int(number_nz - 1)  # Индекс значения заболеваемости первого года (first_year)
        l = 10 * int(number_nz)  # Индекс значения заболеваемости последнего года (last_year)\

    string_russian = russian[c:l]  # Строчка со значениями заболеваемости нозологии №(nz) по РФ
    string_district = district[c:l]  # Строчка со значениями заболеваемости нозологии №(nz) по Округу
    string_region = region[c:l]  # Строчка со значениями заболеваемости нозологии №(nz) по Региону

    # line_number_nz = (f'Нозологи № {number_nz}')

    # print(string_russian)
    # print(string_district)
    # print(string_region)

    line_russian.append(string_russian)
    line_district.append(string_district)
    line_region.append(string_region)  # [0: (len(string_region) - 1)])

# **************************************Вписываем_значения_заболеваемости_Рф_Окуруга_Региона***************************************************


new_list_rf = []  # список значений заболеваемости за последний год по РФ
new_list_district = []  # список значений заболеваемости за последний год по Округу
new_list_reg = []  # список значений заболеваемости за последний год по Региону
new_list_smp = []

for i in line_russian:
    last_year_nz = i[len(i) - 1]
    new_list_rf.append(last_year_nz)  # Добавляем значений заболеваемости за последний год по РФ

for i in line_district:
    last_year_nz = i[len(i) - 1]
    new_list_district.append(last_year_nz)  # Добавляем значений заболеваемости за последний год по Округу

for i in line_region:
    last_year_nz = i[len(i) - 1]
    new_list_reg.append(last_year_nz)  # Добавляем значений заболеваемости за последний год по Региону

# **************************************СЧИТАЕМ___СМП*******************************************************


for i in line_region:
    # print(i)
    i.pop()
    smp_region = i
    smp_list = []

    for element in smp_region:
        if element != 0:
            smp_list.append(element)

    smp_list_copy = smp_list.copy()

    maximum = max(smp_list_copy)
    idx_max = smp_list_copy.index(maximum)
    smp_list_copy.pop(idx_max)

    minimum = min(smp_list_copy)
    idx_min = smp_list_copy.index(minimum)
    smp_list_copy.pop(idx_min)

    smp_value = sum(smp_list_copy) / len(smp_list_copy)
    smp = "%.2f" % smp_value
    new_list_smp.append(smp)
# **********************************************ВЫШЕ\НИЖЕ****************************************************
up_down = {1: 'ниже', 2: 'на уровне', 3: 'выше'}
pretext = {1: 'в', 2: 'на', 3: ' '}
time_percent = {1: 'раза', 2: '%', 3: ''}

# **********************************************ТЕКСТОВКА*****************************************************

documents = Document('text_finish.docx')  # Открываем документ

p = documents.add_paragraph()  # Создаем параграф
p.add_run('МАТЕРИАЛЫ').bold = True  # Записываем в этот пораграф
p.add_run(f' о деятельности Управления Роспотребнадзора по {region_text}').bold = True
p.add_run(f' и ФБУЗ «Центр гигиены и эпидемиологии в {region_text}»').bold = True
p = documents.add_paragraph()  # Создаем параграф
p.add_run(f'Инфекционная и паразитарная заболеваемость в {first_year} - {last_year}гг.').bold = True
p = documents.add_paragraph('')  # Создаем параграф
p.add_run(f'В {last_year} году для некоторых инфекционных болезней отмечается подъем заболеваемости, ')
p.add_run('что может быть вызвано как ухудшением эпидемиологической ситуации, ')
p.add_run('так и характерными проявлениями эпидемического процесса отдельных ')
p.add_run('инфекций или улучшением качества диагностики среди населения. ')
p.add_run('Так, в многолетней динамике отмечается рост заболеваемости: ')

p = documents.add_paragraph()  # Создаем параграф

for i in range(len(nz)):
    p = documents.add_paragraph()  # Создаем параграф
    p.add_run(f'{nz_dict.get(nz[i])}:').bold = True
    p.add_run(
        f'{new_list_reg[i]} на 100 тыс. населения при среднемноголетней заболеваемости {new_list_smp[i]}. Показатель ')
    p.add_run(f'по субъекту в {last_year} году')

    up_down_list = []
    pretext_list = []
    time_percent_list = []

    time_percent_value_list = []  # Если < 1.5 раз то %, если > 1.5 то разы

    percent = (new_list_reg[i] * 100) / new_list_rf[i] - 100  # Узнаем в процентах
    time = 0.0  # узнаем во сколько раз больше
    if new_list_reg[i] > new_list_rf[i]:
        time = new_list_reg[i] / new_list_rf[i]
        up_down_list.append(up_down.get(3))  # если регион больше РФ то  показатель заболеваемости (up_down) = ВЫШЕ
    else:
        time = new_list_rf[i] / new_list_reg[i]
        up_down_list.append(up_down.get(1))  # если РФ больше региона то  показатель заболеваемости (up_down) = НИЖЕ

    if abs(time) > 1.5:
        pretext_list.append(pretext.get(1))  # в
        time_value = "%.2f" % abs(time)
        time_percent_value_list.append(time_value)
        time_percent_list.append(time_percent.get(1))

    if abs(time) <= 1.5:
        if 0 < abs(percent) < 15:
            up_down_list.clear()
            up_down_list.append(up_down.get(2))
            pretext_list.append(pretext.get(3))
            time_percent_value_list.append('')
            time_percent_list.append(time_percent.get(3))
        else:
            pretext_list.append(pretext.get(2))
            percent_value = "%.2f" % abs(percent)
            time_percent_value_list.append(percent_value)
            time_percent_list.append(time_percent.get(2))

    upd = up_down_list[0]  # выше / на уровне / ниже
    pt_l = pretext_list[0]  # в / на
    ttp_value = time_percent_value_list[0] # значение
    tp_l = time_percent_list[0]  # в % или раз

    p.add_run(f' {upd} ').bold = True
    p.add_run(f'показателя по Российской Федерации ({new_list_rf[i]} на 100 тыс. населения)')
    p.add_run(f'{pt_l} {time_percent_value_list[0]} {tp_l}').bold = True
    p.add_run(
        f'  Заболеваемость {nz_dict.get(nz[i])} в  {district_text} в {last_year} составила {new_list_district[i]}')

documents.save('text_finish.docx')  # ПОСЛЕДНЯЯ СТРОЧКА В КОДЕ!!!
